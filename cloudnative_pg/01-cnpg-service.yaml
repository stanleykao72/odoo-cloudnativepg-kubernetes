# Example of definition of a test cluster using all the elements available
# in the CRD. Please change values appropriately for your environment.
# Remember that you can take advantage of convention over configuration
# and normally you don't need to use all these definitions.

apiVersion: v1
data:
  password: b2Rvbwo=
  username: b2Rvbwo=
kind: Secret
metadata:
  name: cluster-odoo-app-user
type: kubernetes.io/basic-auth
---
apiVersion: v1
data:
  password: cG9zdGdyZXMK
  username: cG9zdGdyZXMK
kind: Secret
metadata:
  name: cluster-postgresql-superuser
type: kubernetes.io/basic-auth
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: backup-creds
# data:
#   ACCESS_KEY_ID: a2V5X2lk
#   ACCESS_SECRET_KEY: c2VjcmV0X2tleQ==
---
apiVersion: v1
kind: Secret
metadata:
  name: odoo-auth
  # namespace: demo
type: kubernetes.io/basic-auth
stringData:
  username: odoo      # required field for kubernetes.io/basic-auth
  password: odoo # required field for kubernetes.io/basic-auth
---
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: cluster-postgresql
spec:
  description: "Postgresql of cluster"
  imageName: ghcr.io/cloudnative-pg/postgresql:16.1
  # imagePullSecret is only required if the images are located in a private registry
  # imagePullSecrets:
  #   - name: private_registry_access
  instances: 3
  startDelay: 300
  stopDelay: 300
  primaryUpdateStrategy: unsupervised

  postgresql:
    parameters:
      shared_buffers: 256MB
      pg_stat_statements.max: '10000'
      pg_stat_statements.track: all
      auto_explain.log_min_duration: '10s'

      random_page_cost: "1.1"
      log_statement: "ddl"
      log_checkpoints: "on"
    pg_hba:
      # - host all all 10.43.0.0/16 md5
      - local all all md5
      # - host odoo odoo all password

  bootstrap:
    initdb:
      database: postgresdb
      owner: odoo
      secret:
        name: odoo-auth
    # Alternative bootstrap method: start from a backup
    #recovery:
    #  backup:
    #    name: backup-example

  enableSuperuserAccess: true
  superuserSecret:
    name: cluster-postgresql-superuser

  # storage:
  #   storageClass: standard
  #   size: 1Gi

  storage:
    storageClass: longhorn-1r
    size: 6Gi
  walStorage:
    storageClass: longhorn-1r
    size: 6Gi

  # storage:
  #   size: 6Gi
  #   pvcTemplate:
  #     accessModes:
  #       - ReadWriteOnce
      # resources:
      #   requests:
      #     storage: 6Gi
      # storageClassName: standard
      # volumeMode: Filesystem

  # backup:
  #   barmanObjectStore:
  #     destinationPath: s3://cluster-example-full-backup/
  #     endpointURL: http://custom-endpoint:1234
  #     s3Credentials:
  #       accessKeyId:
  #         name: backup-creds
  #         key: ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: backup-creds
  #         key: ACCESS_SECRET_KEY
  #     wal:
  #       compression: gzip
  #       encryption: AES256
  #     data:
  #       compression: gzip
  #       encryption: AES256
  #       immediateCheckpoint: false
  #       jobs: 2
  #   retentionPolicy: "30d"

  resources:
    requests:
      memory: "512Mi"
      cpu: "1"
    limits:
      memory: "1Gi"
      cpu: "2"

  affinity:
    enablePodAntiAffinity: true
    topologyKey: failure-domain.beta.kubernetes.io/zone
    # nodeSelector:
    #   longhorn: "true"

  enablePDB: false
  # nodeMaintenanceWindow:
  #   inProgress: false
  #   reusePVC: false

  monitoring:
    enablePodMonitor: true